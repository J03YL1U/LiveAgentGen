/**
 * generated by Xtext 2.33.0
 */
package org.xtext.liveprobes.liveagent.cfg.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.liveprobes.liveagent.cfg.CfgPackage;
import org.xtext.liveprobes.liveagent.cfg.Configuration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getLanguage <em>Language</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getCompile <em>Compile</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getCommand <em>Command</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getPath <em>Path</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getDap <em>Dap</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getParser <em>Parser</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getIo <em>Io</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getThread <em>Thread</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getAdapter <em>Adapter</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getBreakpoint <em>Breakpoint</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getLoad <em>Load</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getExec <em>Exec</em>}</li>
 *   <li>{@link org.xtext.liveprobes.liveagent.cfg.impl.ConfigurationImpl#getAdditionalConfig <em>Additional Config</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigurationImpl extends MinimalEObjectImpl.Container implements Configuration
{
  /**
   * The default value of the '{@link #getLanguage() <em>Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguage()
   * @generated
   * @ordered
   */
  protected static final String LANGUAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLanguage() <em>Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguage()
   * @generated
   * @ordered
   */
  protected String language = LANGUAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getCompile() <em>Compile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompile()
   * @generated
   * @ordered
   */
  protected static final String COMPILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompile() <em>Compile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompile()
   * @generated
   * @ordered
   */
  protected String compile = COMPILE_EDEFAULT;

  /**
   * The default value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected static final String COMMAND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected String command = COMMAND_EDEFAULT;

  /**
   * The default value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected static final String PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPath() <em>Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPath()
   * @generated
   * @ordered
   */
  protected String path = PATH_EDEFAULT;

  /**
   * The default value of the '{@link #getDap() <em>Dap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDap()
   * @generated
   * @ordered
   */
  protected static final String DAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDap() <em>Dap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDap()
   * @generated
   * @ordered
   */
  protected String dap = DAP_EDEFAULT;

  /**
   * The default value of the '{@link #getParser() <em>Parser</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParser()
   * @generated
   * @ordered
   */
  protected static final String PARSER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParser() <em>Parser</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParser()
   * @generated
   * @ordered
   */
  protected String parser = PARSER_EDEFAULT;

  /**
   * The default value of the '{@link #getIo() <em>Io</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIo()
   * @generated
   * @ordered
   */
  protected static final String IO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIo() <em>Io</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIo()
   * @generated
   * @ordered
   */
  protected String io = IO_EDEFAULT;

  /**
   * The default value of the '{@link #getThread() <em>Thread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThread()
   * @generated
   * @ordered
   */
  protected static final String THREAD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getThread() <em>Thread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThread()
   * @generated
   * @ordered
   */
  protected String thread = THREAD_EDEFAULT;

  /**
   * The default value of the '{@link #getAdapter() <em>Adapter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdapter()
   * @generated
   * @ordered
   */
  protected static final String ADAPTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAdapter() <em>Adapter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdapter()
   * @generated
   * @ordered
   */
  protected String adapter = ADAPTER_EDEFAULT;

  /**
   * The default value of the '{@link #getBreakpoint() <em>Breakpoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakpoint()
   * @generated
   * @ordered
   */
  protected static final String BREAKPOINT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBreakpoint() <em>Breakpoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakpoint()
   * @generated
   * @ordered
   */
  protected String breakpoint = BREAKPOINT_EDEFAULT;

  /**
   * The default value of the '{@link #getLoad() <em>Load</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoad()
   * @generated
   * @ordered
   */
  protected static final String LOAD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLoad() <em>Load</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoad()
   * @generated
   * @ordered
   */
  protected String load = LOAD_EDEFAULT;

  /**
   * The default value of the '{@link #getExec() <em>Exec</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExec()
   * @generated
   * @ordered
   */
  protected static final String EXEC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExec() <em>Exec</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExec()
   * @generated
   * @ordered
   */
  protected String exec = EXEC_EDEFAULT;

  /**
   * The cached value of the '{@link #getAdditionalConfig() <em>Additional Config</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdditionalConfig()
   * @generated
   * @ordered
   */
  protected EList<EObject> additionalConfig;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CfgPackage.Literals.CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLanguage()
  {
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLanguage(String newLanguage)
  {
    String oldLanguage = language;
    language = newLanguage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__LANGUAGE, oldLanguage, language));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCompile()
  {
    return compile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompile(String newCompile)
  {
    String oldCompile = compile;
    compile = newCompile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__COMPILE, oldCompile, compile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommand()
  {
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommand(String newCommand)
  {
    String oldCommand = command;
    command = newCommand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__COMMAND, oldCommand, command));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPath()
  {
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPath(String newPath)
  {
    String oldPath = path;
    path = newPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__PATH, oldPath, path));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDap()
  {
    return dap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDap(String newDap)
  {
    String oldDap = dap;
    dap = newDap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__DAP, oldDap, dap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getParser()
  {
    return parser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParser(String newParser)
  {
    String oldParser = parser;
    parser = newParser;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__PARSER, oldParser, parser));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIo()
  {
    return io;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIo(String newIo)
  {
    String oldIo = io;
    io = newIo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__IO, oldIo, io));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getThread()
  {
    return thread;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThread(String newThread)
  {
    String oldThread = thread;
    thread = newThread;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__THREAD, oldThread, thread));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAdapter()
  {
    return adapter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAdapter(String newAdapter)
  {
    String oldAdapter = adapter;
    adapter = newAdapter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__ADAPTER, oldAdapter, adapter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBreakpoint()
  {
    return breakpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBreakpoint(String newBreakpoint)
  {
    String oldBreakpoint = breakpoint;
    breakpoint = newBreakpoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__BREAKPOINT, oldBreakpoint, breakpoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLoad()
  {
    return load;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLoad(String newLoad)
  {
    String oldLoad = load;
    load = newLoad;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__LOAD, oldLoad, load));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExec()
  {
    return exec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExec(String newExec)
  {
    String oldExec = exec;
    exec = newExec;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CfgPackage.CONFIGURATION__EXEC, oldExec, exec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getAdditionalConfig()
  {
    if (additionalConfig == null)
    {
      additionalConfig = new EObjectContainmentEList<EObject>(EObject.class, this, CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG);
    }
    return additionalConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG:
        return ((InternalEList<?>)getAdditionalConfig()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CfgPackage.CONFIGURATION__LANGUAGE:
        return getLanguage();
      case CfgPackage.CONFIGURATION__COMPILE:
        return getCompile();
      case CfgPackage.CONFIGURATION__COMMAND:
        return getCommand();
      case CfgPackage.CONFIGURATION__PATH:
        return getPath();
      case CfgPackage.CONFIGURATION__DAP:
        return getDap();
      case CfgPackage.CONFIGURATION__PARSER:
        return getParser();
      case CfgPackage.CONFIGURATION__IO:
        return getIo();
      case CfgPackage.CONFIGURATION__THREAD:
        return getThread();
      case CfgPackage.CONFIGURATION__ADAPTER:
        return getAdapter();
      case CfgPackage.CONFIGURATION__BREAKPOINT:
        return getBreakpoint();
      case CfgPackage.CONFIGURATION__LOAD:
        return getLoad();
      case CfgPackage.CONFIGURATION__EXEC:
        return getExec();
      case CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG:
        return getAdditionalConfig();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CfgPackage.CONFIGURATION__LANGUAGE:
        setLanguage((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__COMPILE:
        setCompile((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__COMMAND:
        setCommand((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__PATH:
        setPath((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__DAP:
        setDap((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__PARSER:
        setParser((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__IO:
        setIo((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__THREAD:
        setThread((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__ADAPTER:
        setAdapter((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__BREAKPOINT:
        setBreakpoint((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__LOAD:
        setLoad((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__EXEC:
        setExec((String)newValue);
        return;
      case CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG:
        getAdditionalConfig().clear();
        getAdditionalConfig().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CfgPackage.CONFIGURATION__LANGUAGE:
        setLanguage(LANGUAGE_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__COMPILE:
        setCompile(COMPILE_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__COMMAND:
        setCommand(COMMAND_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__PATH:
        setPath(PATH_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__DAP:
        setDap(DAP_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__PARSER:
        setParser(PARSER_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__IO:
        setIo(IO_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__THREAD:
        setThread(THREAD_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__ADAPTER:
        setAdapter(ADAPTER_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__BREAKPOINT:
        setBreakpoint(BREAKPOINT_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__LOAD:
        setLoad(LOAD_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__EXEC:
        setExec(EXEC_EDEFAULT);
        return;
      case CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG:
        getAdditionalConfig().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CfgPackage.CONFIGURATION__LANGUAGE:
        return LANGUAGE_EDEFAULT == null ? language != null : !LANGUAGE_EDEFAULT.equals(language);
      case CfgPackage.CONFIGURATION__COMPILE:
        return COMPILE_EDEFAULT == null ? compile != null : !COMPILE_EDEFAULT.equals(compile);
      case CfgPackage.CONFIGURATION__COMMAND:
        return COMMAND_EDEFAULT == null ? command != null : !COMMAND_EDEFAULT.equals(command);
      case CfgPackage.CONFIGURATION__PATH:
        return PATH_EDEFAULT == null ? path != null : !PATH_EDEFAULT.equals(path);
      case CfgPackage.CONFIGURATION__DAP:
        return DAP_EDEFAULT == null ? dap != null : !DAP_EDEFAULT.equals(dap);
      case CfgPackage.CONFIGURATION__PARSER:
        return PARSER_EDEFAULT == null ? parser != null : !PARSER_EDEFAULT.equals(parser);
      case CfgPackage.CONFIGURATION__IO:
        return IO_EDEFAULT == null ? io != null : !IO_EDEFAULT.equals(io);
      case CfgPackage.CONFIGURATION__THREAD:
        return THREAD_EDEFAULT == null ? thread != null : !THREAD_EDEFAULT.equals(thread);
      case CfgPackage.CONFIGURATION__ADAPTER:
        return ADAPTER_EDEFAULT == null ? adapter != null : !ADAPTER_EDEFAULT.equals(adapter);
      case CfgPackage.CONFIGURATION__BREAKPOINT:
        return BREAKPOINT_EDEFAULT == null ? breakpoint != null : !BREAKPOINT_EDEFAULT.equals(breakpoint);
      case CfgPackage.CONFIGURATION__LOAD:
        return LOAD_EDEFAULT == null ? load != null : !LOAD_EDEFAULT.equals(load);
      case CfgPackage.CONFIGURATION__EXEC:
        return EXEC_EDEFAULT == null ? exec != null : !EXEC_EDEFAULT.equals(exec);
      case CfgPackage.CONFIGURATION__ADDITIONAL_CONFIG:
        return additionalConfig != null && !additionalConfig.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (language: ");
    result.append(language);
    result.append(", compile: ");
    result.append(compile);
    result.append(", command: ");
    result.append(command);
    result.append(", path: ");
    result.append(path);
    result.append(", dap: ");
    result.append(dap);
    result.append(", parser: ");
    result.append(parser);
    result.append(", io: ");
    result.append(io);
    result.append(", thread: ");
    result.append(thread);
    result.append(", adapter: ");
    result.append(adapter);
    result.append(", breakpoint: ");
    result.append(breakpoint);
    result.append(", load: ");
    result.append(load);
    result.append(", exec: ");
    result.append(exec);
    result.append(')');
    return result.toString();
  }

} //ConfigurationImpl
