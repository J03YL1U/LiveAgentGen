/*
 * generated by Xtext 2.33.0
 */
package org.xtext.liveprobes.liveagent.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.liveprobes.liveagent.cfg.AgentConfig;
import org.xtext.liveprobes.liveagent.cfg.Bool;
import org.xtext.liveprobes.liveagent.cfg.CfgPackage;
import org.xtext.liveprobes.liveagent.cfg.Configuration;
import org.xtext.liveprobes.liveagent.cfg.Line;
import org.xtext.liveprobes.liveagent.services.CfgGrammarAccess;

@SuppressWarnings("all")
public class CfgSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CfgGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CfgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CfgPackage.AGENT_CONFIG:
				sequence_AgentConfig(context, (AgentConfig) semanticObject); 
				return; 
			case CfgPackage.BOOL:
				sequence_Bool(context, (Bool) semanticObject); 
				return; 
			case CfgPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case CfgPackage.LINE:
				sequence_Line(context, (Line) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AgentConfig returns AgentConfig
	 *
	 * Constraint:
	 *     config=Configuration
	 * </pre>
	 */
	protected void sequence_AgentConfig(ISerializationContext context, AgentConfig semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CfgPackage.Literals.AGENT_CONFIG__CONFIG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CfgPackage.Literals.AGENT_CONFIG__CONFIG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgentConfigAccess().getConfigConfigurationParserRuleCall_2_0(), semanticObject.getConfig());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Bool returns Bool
	 *
	 * Constraint:
	 *     (name=ID value=BOOLEAN)
	 * </pre>
	 */
	protected void sequence_Bool(ISerializationContext context, Bool semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CfgPackage.Literals.BOOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CfgPackage.Literals.BOOL__NAME));
			if (transientValues.isValueTransient(semanticObject, CfgPackage.Literals.BOOL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CfgPackage.Literals.BOOL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBoolAccess().getValueBOOLEANParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (
	 *         language=STRING 
	 *         compile=BOOLEAN 
	 *         command=STRING 
	 *         path=STRING 
	 *         dap=STRING 
	 *         parser=BOOLEAN 
	 *         io=BOOLEAN 
	 *         thread=STRING 
	 *         adapter=STRING 
	 *         breakpoint=STRING 
	 *         load=STRING 
	 *         exec=STRING 
	 *         (additionalConfig+=Bool | additionalConfig+=Line)*
	 *     )
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 * </pre>
	 */
	protected void sequence_Line(ISerializationContext context, Line semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CfgPackage.Literals.LINE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CfgPackage.Literals.LINE__NAME));
			if (transientValues.isValueTransient(semanticObject, CfgPackage.Literals.LINE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CfgPackage.Literals.LINE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLineAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLineAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
