/*
 * generated by Xtext 2.33.0
 */
package org.xtext.liveprobes.liveagent.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.liveprobes.liveagent.ide.contentassist.antlr.internal.InternalCfgParser;
import org.xtext.liveprobes.liveagent.services.CfgGrammarAccess;

public class CfgParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CfgGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CfgGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConfigurationAccess().getAdditionalConfigAlternatives_36_0(), "rule__Configuration__AdditionalConfigAlternatives_36_0");
			builder.put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
			builder.put(grammarAccess.getAgentConfigAccess().getGroup(), "rule__AgentConfig__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getBoolAccess().getGroup(), "rule__Bool__Group__0");
			builder.put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
			builder.put(grammarAccess.getAgentConfigAccess().getConfigAssignment_2(), "rule__AgentConfig__ConfigAssignment_2");
			builder.put(grammarAccess.getConfigurationAccess().getLanguageAssignment_2(), "rule__Configuration__LanguageAssignment_2");
			builder.put(grammarAccess.getConfigurationAccess().getCompileAssignment_5(), "rule__Configuration__CompileAssignment_5");
			builder.put(grammarAccess.getConfigurationAccess().getCommandAssignment_8(), "rule__Configuration__CommandAssignment_8");
			builder.put(grammarAccess.getConfigurationAccess().getPathAssignment_11(), "rule__Configuration__PathAssignment_11");
			builder.put(grammarAccess.getConfigurationAccess().getDapAssignment_14(), "rule__Configuration__DapAssignment_14");
			builder.put(grammarAccess.getConfigurationAccess().getParserAssignment_17(), "rule__Configuration__ParserAssignment_17");
			builder.put(grammarAccess.getConfigurationAccess().getIoAssignment_20(), "rule__Configuration__IoAssignment_20");
			builder.put(grammarAccess.getConfigurationAccess().getThreadAssignment_23(), "rule__Configuration__ThreadAssignment_23");
			builder.put(grammarAccess.getConfigurationAccess().getAdapterAssignment_26(), "rule__Configuration__AdapterAssignment_26");
			builder.put(grammarAccess.getConfigurationAccess().getBreakpointAssignment_29(), "rule__Configuration__BreakpointAssignment_29");
			builder.put(grammarAccess.getConfigurationAccess().getLoadAssignment_32(), "rule__Configuration__LoadAssignment_32");
			builder.put(grammarAccess.getConfigurationAccess().getExecAssignment_35(), "rule__Configuration__ExecAssignment_35");
			builder.put(grammarAccess.getConfigurationAccess().getAdditionalConfigAssignment_36(), "rule__Configuration__AdditionalConfigAssignment_36");
			builder.put(grammarAccess.getBoolAccess().getNameAssignment_1(), "rule__Bool__NameAssignment_1");
			builder.put(grammarAccess.getBoolAccess().getValueAssignment_3(), "rule__Bool__ValueAssignment_3");
			builder.put(grammarAccess.getLineAccess().getNameAssignment_1(), "rule__Line__NameAssignment_1");
			builder.put(grammarAccess.getLineAccess().getValueAssignment_3(), "rule__Line__ValueAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CfgGrammarAccess grammarAccess;

	@Override
	protected InternalCfgParser createParser() {
		InternalCfgParser result = new InternalCfgParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CfgGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CfgGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
